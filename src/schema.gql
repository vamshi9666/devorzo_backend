# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Article {
  articleBanner: String!
  articleId: String!
  articleType: Float!
  author: User
  authorId: String!
  belongsToCommunity: Float!
  comments: [Comments!]!
  communityId: String!
  content: String!
  createdOn: Float!
  durationOfArticle: Float!
  edited: Float!
  isArticleLiked: Boolean
  lastEditedOn: Float
  likes: [Likes!]!
  moderationStatus: Float!
  preview: String!
  tags: [Tags!]!
  title: String!
  views: Float!
}

input ArticleInput {
  articleType: String
  authorId: String
}

type Bookmarks {
  article: Article!
  articleId: String!
  bookmarkedOn: Float!
}

input CheckUserIfUniqueInput {
  email: String
  username: String
}

type Comments {
  comment: String!
  commentedOn: Float!
  commentId: String!
  userId: String!
}

type Community {
  about: String!
  communityBanner: String!
  communityDp: String!
  communityId: String!
  communityType: Float!
  createdOn: Float!
  name: String!
  rules: String!
}

input CreateNewUserInput {
  email: String!
  fullname: String!
  gender: Float
  password: String!
  userBio: String
  username: String!
}

input FindArticleInput {
  articleId: String!
}

input FindUserInput {
  email: String
  userId: String
  username: String
}

type Follow {
  followers: [Followers!]
  user: User
  userId: String!
}

type Followers {
  followedOn: Float!
  follower: User
  followerId: String!
}

input FollowUserInput {
  email: String
  userId: String!
  username: String
}

type History {
  article: Article!
  articleId: String!
  visitedOn: Float!
}

type Likes {
  likedOn: Float!
  userId: String!
}

input LogUserInput {
  email: String!
  password: String!
}

type Mutation {
  addTestArticle: Article!
  addTestCommunity: Community!
  addToBookmarks(where: FindArticleInput!): Boolean
  addToHistory(where: FindArticleInput!): Boolean
  clearAllBookmarks: Boolean
  clearAllHistory: Boolean
  createNewUser(data: CreateNewUserInput!): User
  deleteUser(where: FindUserInput!): Boolean
  followUser(where: FollowUserInput!): Boolean
  loginExistingUser(where: LogUserInput!): User
  removeArticleFromBookmarks(where: FindArticleInput!): Boolean
  removeArticleFromHistory(where: FindArticleInput!): Boolean
  unfollowUser(where: FollowUserInput!): Boolean
  updateUser(data: UpdateUserInput!, where: FindUserInput!): User
}

type Query {
  article(where: FindArticleInput!): Article
  articles(limit: Float, skip: Float, where: ArticleInput): [Article!]
  communities: [Community!]!
  followers(where: FollowUserInput!): Follow
  following(where: FollowUserInput!): [Follow!]!
  helloFromCommunity: String!
  isUserUnique(where: CheckUserIfUniqueInput!): Boolean!
  user(where: FindUserInput!): User
  users: [User!]!
}

type SocialLinks {
  github: String
  link: String
  linkedin: String
  twitter: String
}

input SocialLinksInput {
  github: String
  link: String
  linkedin: String
  twitter: String
}

type Tags {
  addedOn: Float!
  tag: String!
}

input UpdateUserInput {
  email: String
  fullname: String
  gender: Float
  profileImage: String
  socialLinks: SocialLinksInput
  userBio: String
  username: String
}

type User {
  accountCreatedOn: Float!
  accountInitialised: Int
  accountType: Int
  authToken: String
  bookmarks: [Bookmarks!]
  email: String!
  emailVerified: Int
  fullname: String!
  gender: Int!
  history: [History!]
  profileImage: String!
  socialLinks: SocialLinks
  userBio: String!
  userId: String!
  username: String!
}
